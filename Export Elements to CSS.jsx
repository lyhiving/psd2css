//// This script exports extended layer.bounds information to [psd_file_name].xml// by pattesdours// http://www.ps-scripts.com/bb/viewtopic.php?p=9745&sid=03d540b9a8788dee9a1f51d6539e0ee0#p9745//// File customized by Miguel Solorio 9-16-13 to export width/height/top/left positioning into a scss filefunction docCheck() {    // ensure that there is at least one document open    if (!documents.length) {        alert('There are no documents open.');        return; // quit    }}docCheck();var originalRulerUnits = preferences.rulerUnits;preferences.rulerUnits = Units.PIXELS;var docRef = activeDocument;var docWidth = docRef.width.value;var docHeight = docRef.height.value;var mySourceFilePath = activeDocument.fullName.path + "/";//  Code to get layer index / descriptor//cTID = function(s) { return app.charIDToTypeID(s); };sTID = function(s) { return app.stringIDToTypeID(s); };function getLayerDescriptor (doc, layer) {    var ref = new ActionReference();    ref.putEnumerated(cTID("Lyr "), cTID("Ordn"), cTID("Trgt"));    return executeActionGet(ref)};function getLayerID(doc, layer) {  var d = getLayerDescriptor(doc, layer);  return d.getInteger(cTID('LyrI'));};var stackorder = 0;// function from Xbytor to traverse all layerstraverseLayers = function(doc, ftn, reverse) {  function _traverse(doc, layers, ftn, reverse) {    var ok = true;    for (var i = 1; i <= layers.length && ok != false; i++) {      var index = (reverse == true) ? layers.length-i : i - 1;      var layer = layers[index];      stackorder = stackorder + 1;      ok = ftn(doc, layer, stackorder);    }    return ok;  };  return _traverse(doc, doc.layers, ftn, reverse);};// create a string to hold the datavar str ="";// class using a contructorfunction cLayer(doc, layer) {  this.layerID = getLayerID(doc, layer);  this.layerWidth = layer.bounds[2].value - layer.bounds[0].value;  this.layerHeight = layer.bounds[3].value - layer.bounds[1].value;  // these return object coordinates relative to canvas  this.upperLeftX = layer.bounds[0].value;  this.upperLeftY = layer.bounds[1].value;  // convert to rems  // take width and height and divide by 2, round to nearest .10  // wrap in variables for easier readability  this.width = (this.layerWidth / 2) * .1;  this.height = (this.layerHeight / 2) * .1;  this.horizontal = (this.upperLeftX / 2) * .1;  this.vertical = (this.upperLeftY / 2) * .1;  // round and add rems  this.elemWidth = Math.round(width * 10) / 10 + "rem";  this.elemHeight = Math.round(height * 10) / 10 + "rem";  this.posY = Math.round(vertical * 10) / 10 + "rem";  this.posX = Math.round(horizontal * 10) / 10 + "rem";  return this;}// add header linestr = "";// now a function to collect the datafunction exportBounds(doc, layer, i) {    var isVisible = layer.visible;    var layerData = cLayer(doc, layer);  if(isVisible){// Layer object main coordinates relative to its active pixels    var str2 = "#" + layer.name    + "{"    + "\n top: " + posY + ";"    + "\n left: " + posX + ";"    + "\n width: " + elemWidth + ";"    + "\n height: " + elemHeight + ";"    + "\n background-image: url('#{$url}images/"+layer.name+"@2x.png');" // add background-image    + "\n}\n\n"    str += str2.toString();   };};// call X's function using the one abovetraverseLayers(app.activeDocument, exportBounds, true);// Use this to export XML file to same directory where PSD file is located    var mySourceFilePath = activeDocument.fullName.path + "/";// create a reference to a file for output    var csvFile = new File(mySourceFilePath.toString().match(/([^\.]+)/)[1] + app.activeDocument.name.match(/([^\.]+)/)[1] + ".scss");// open the file, write the data, then close the filecsvFile.open('w');csvFile.writeln(str);csvFile.close();preferences.rulerUnits = originalRulerUnits;// Confirm that operation has completedalert("Coordinates Exported!" + "\n" + "Layer coordinates were successfully exported to:" + "\n" + "\n" + mySourceFilePath.toString().match(/([^\.]+)/)[1] + app.activeDocument.name.match(/([^\.]+)/)[1] + ".scss");